
AVR64DD32 XTAL and EXTCLK.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00806000  00806000  0000014e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000fa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000014e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000180  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  000001c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002a51  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000228f  00000000  00000000  00002c81  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004fc  00000000  00000000  00004f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  0000540c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001597  00000000  00000000  00005474  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000030  00000000  00000000  00006a0b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  68:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  6c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  70:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  74:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  78:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  7c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  80:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  84:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  88:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  8c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e7       	ldi	r29, 0x7F	; 127
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
  a0:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <CLOCK_XOSCHF_clock_init>:
}

void CLOCK_XOSCHF_clock_init()
{
    /* Enable external (32 MHz) clock input */
    ccp_write_io((uint8_t *) &CLKCTRL.XOSCHFCTRLA, CLKCTRL_SELHF_EXTCLOCK_gc | CLKCTRL_FRQRANGE_32M_gc | CLKCTRL_ENABLE_bm);//selected as clock // 8, 16, 24, 32Mhz
  a8:	6f e0       	ldi	r22, 0x0F	; 15
  aa:	80 e8       	ldi	r24, 0x80	; 128
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 75 00 	call	0xea	; 0xea <ccp_write_io>

    /* Set Main Clock Prescaler*/
    ccp_write_io((uint8_t *) &CLKCTRL.MCLKCTRLB, CLKCTRL_PDIV_2X_gc | CLKCTRL_PEN_bm);
  b2:	61 e0       	ldi	r22, 0x01	; 1
  b4:	81 e6       	ldi	r24, 0x61	; 97
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	0e 94 75 00 	call	0xea	; 0xea <ccp_write_io>

    /* Set the main clock to use external clock as source */
    ccp_write_io((uint8_t *) &CLKCTRL.MCLKCTRLA, CLKCTRL_CLKSEL_EXTCLK_gc | CLKCTRL_CLKOUT_bm);//comment | CLKCTRL_CLKOUT_bm if no need clock output on PA4
  bc:	63 e8       	ldi	r22, 0x83	; 131
  be:	80 e6       	ldi	r24, 0x60	; 96
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 75 00 	call	0xea	; 0xea <ccp_write_io>

    /* Wait for system oscillator change to complete */
    while (CLKCTRL.MCLKSTATUS & CLKCTRL_SOSC_bm)
  c6:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7f0065>
  ca:	80 fd       	sbrc	r24, 0
  cc:	fc cf       	rjmp	.-8      	; 0xc6 <CLOCK_XOSCHF_clock_init+0x1e>
	{};
    /* Configuration complete; main clock is now running at 32 MHz / 2 = 16 MHz */
}
  ce:	08 95       	ret

000000d0 <main>:
#include "Settings.h"


int main(void)
{
	PORTA.DIRSET = PIN1_bm /*| PIN3_bm*/ | PIN4_bm; // PA1 for toggle output test, PA3 for unused XTALHF output test (toggles as well, only if using an internal or external clock, except for an external crystal source), PA4 - Clock out.
  d0:	82 e1       	ldi	r24, 0x12	; 18
  d2:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <__TEXT_REGION_LENGTH__+0x7f0401>
	//CLOCK_XOSCHF_crystal_init();
	CLOCK_XOSCHF_clock_init();
  d6:	0e 94 54 00 	call	0xa8	; 0xa8 <CLOCK_XOSCHF_clock_init>
	//CLOCK_INHF_clock_init();
    while (1) 
    {
		PORTA.OUTSET = PIN4_bm;
  da:	e0 e0       	ldi	r30, 0x00	; 0
  dc:	f4 e0       	ldi	r31, 0x04	; 4
  de:	80 e1       	ldi	r24, 0x10	; 16
  e0:	85 83       	std	Z+5, r24	; 0x05
		PORTA.OUTCLR = PIN4_bm;
  e2:	86 83       	std	Z+6, r24	; 0x06
		//PORTA.OUTTGL = PIN3_bm;
		PORTA.OUTTGL = PIN1_bm;
  e4:	82 e0       	ldi	r24, 0x02	; 2
  e6:	87 83       	std	Z+7, r24	; 0x07
  e8:	f8 cf       	rjmp	.-16     	; 0xda <main+0xa>

000000ea <ccp_write_io>:
  ea:	dc 01       	movw	r26, r24
  ec:	28 ed       	ldi	r18, 0xD8	; 216
  ee:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__TEXT_REGION_LENGTH__+0x7f0034>
  f2:	6c 93       	st	X, r22
  f4:	08 95       	ret

000000f6 <_exit>:
  f6:	f8 94       	cli

000000f8 <__stop_program>:
  f8:	ff cf       	rjmp	.-2      	; 0xf8 <__stop_program>
